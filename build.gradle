buildscript {
    ext.kotlin_version = '1.1.2'
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}.${config.build_number}"
group = "wiresegal.psionup"
archivesBaseName = config.mod_name
ext.corePlugin = config.core_plugin

minecraft {
    useDepAts = true
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"
    mappings = config.mc_mappings

    replace 'GRADLE:BUILD', config.build_number
    replace 'GRADLE:VERSION', config.version

    replaceIn 'LibMisc.kt'

    clientJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$corePlugin"]
}

repositories {
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "http://mvn.rx14.co.uk/shadowfacts/"
    }
}

dependencies {
    compile "net.shadowfacts:Forgelin:1.4.1"

    deobfCompile "mezz.jei:jei_${config.jei_version}"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

jar {

    archiveName "${archivesBaseName}-r${version}.jar"
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

sourceSets { main.java.srcDirs += 'src/main/kotlin' }
idea {
    module {
        inheritOutputDirs = true
    }
    project {
        languageLevel = '1.8'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
